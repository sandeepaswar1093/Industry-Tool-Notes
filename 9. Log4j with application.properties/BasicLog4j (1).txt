Log4J:

1. It is a Tracing or Logging Tool used in Specially in Production Environment. It is used to
find success messages, information, warnings, errors in application while using it.

2. By Default any Message/Error will be printed on Console, which is temporary location, it
can show only few lines like last 100 lines.

3. To see all problems from beginning to till date use Log4j concept.

4. Log4J can write problems/error to File(.log), Database, Email, Network etc..`

5. Log4J provides Error Details like Exception type, class and method with line number it
occured, Date and time also other information ..

6. Log4J also supports writing errors to Console also.

7. Using System.out.println prints only on console, but not to file or any other memory.



Log4J has 3 components:

1. Logger (LOG) Object: This object must be created inside the class as a instance variable. It is
used to enable Log4J service to current class. If this object is not created in the class then Log4J
concpet will not applicable(will not work)for that class.


 It has 6 priority methods with names
(along with order)

pl  Name    Method
1   TRACE     trace(msg)
2   DEBUG     debug(msg)
3   INFO      info(msg)
4   WARN      warn(msg)
5   ERROR     error(msg)
6   FATAL     fatal(msg)
-   OFF       -

a. debug(msg) : It prints a message with data. It is used to print a final result of process.
Like EmpId after saved is : 2362.

b. info(msg) : It is used to print a simple message. Like process state-I done, if block end.
Email sent etc..


c. warn(msg): It is used to print warning messages. Like Collection is not with Generic, local
variable not used, resource not closed etc...

d. error(msg): It is used to print Exceptions like NullPointer, ArrayIndex, SQLException etc..

e. fatal(mgs) : It indicates very high level problem. Like Server/DB Down, Connection
timeout, Network broken, Class Not Found etc...

OFF is used to disable Log4J concept in application. Log4J code need to be deleted.

__________________________________________________________________________
2. Appender : It will provide details for "Where to print Message?". Means in what type of
memories, messages must be stored.

i. File use FileAppender  *****

ii. Database use JdbcAppender

iii. Email use SmtpAppender

iv. Console use ConsoleAppender

v. Network use Ftp(Telnet)Appender

In one Application we can use more than one appender also.

____________________________________________________________________________
3. Layout : It provide the format of message to be printed.
 Possible layouts are:

i. Simple Layout : Print message as it is

ii. HTML Layout : Print message in HTML format(<html><body>....)

iii. XML Layout: Print message in XML format (<Errors><Type>..<Message>..)

iv. Pattern Layout : This class provides output pattern for a message that contains date, time,
class, method, line number, thread name, message etc..

In development mostly used Appender is FileAppender and Layout is Pattern Layout



a)Date&Time pattern
 %d = date and time
examples:
a) %d
b) %d {dd-MMM-yy hh:mm:ss SSS}
c) %d {dd-MM-yy hh:mm:ss SSS}
d) %d {HH:mm:ss}
e) Here meaning of every word used
f) in date pattern is,
g) dd = date
h) MMM = Month Name
i) MM = Month number
j) yy = Year last two digitis
k) yyy = Year in 4 digits
l) hh = Hours in 12 format
m) HH = Hours in 24 format
n) mm = Minutes
o) ss = Secs
p) SSS = MillSecs
 %C = Class Name
 %M = Method Name
 %m = Message
 %p = Priority method name(DEBUG,INFO..)
 %L = Line Number
 %l = Line number with Link
 %n = New Line(next line)
 %r = time in milli sec.
 %% = To print one '%' symbol.
 we can also use symbols like - [] , /
One Example Pattern with all matching "%d-%C[%M] : {%p}=%m<%L> %n "





log4j.properties

log4j.properties file: This file is used to specify all the configuration details of Log4J. Especially
like Appender Details and Layout Details with Patterns and also root Logger details. This File
contains details in key=value format (.properties). 

Data will be shown in below order like
1. rootLogger
2. appenders
3. layouts


a) In this file (log4j.properties) use symbol '#' to indicates comments.

b) We can specify multiple appenders in log4j.properties file Like 2 File Appenders, one
JdbcAppender, One SmtpAppender etc..

c) Every Appender must be connected with layout

d) Appender name must be define before use at rootLogger level.

e) Appender name can be anything ex: abc,hello,sysout,file,db,email etc..

f) log4j.properties file must be created under src folder (normal project) or
src/main/resource folder (maven project).

g) Make rootLogger = OFF to disable Log4J completely without deleting code in any class or
properties file

h) log4j.properties file will be auto detected by Log4J tool. No special coding is required.

_______________________________________
Example : log4j.properties 

log4j.rootLogger=INFO,stdout,file

# Redirect log messages to console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd} %p %C:%L %n

# Redirect log messages to a log file
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=C:/Users/BR011TX/Desktop/Log/logfiles.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %p %c:%L - %m%n


package com.bikkadIt.pro;
import org.apache.log4j.Logger;
public class Log4jPro {

	private static Logger log=Logger.getLogger(Log4jPro.class);
	public static void main(String[] args) {
		
		log.debug("This is debug message");
		log.info("This is info message");
		log.warn("This is warn message");
		log.error("THis is Error message");
		log.fatal("This is fatal message");
	}
}




pom.xml



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.bikkadIT</groupId>
  <artifactId>Log4JBasic</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  
 <dependencies>
<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.8</version>
</dependency>
</dependencies>

<properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>
  
</project>















































